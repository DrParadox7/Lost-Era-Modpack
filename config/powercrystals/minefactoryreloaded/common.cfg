# Configuration file

Entity {
    # If true, using a portaspawner on an empty minecart will make it into a spawner cart
    B:EnableSpawnerCarts=true
    I:ID.Zoologist=330
}


Machine {

    Conveyor {
        # If false, conveyors will not grab non-item entities. Breaks conveyor mob grinders but makes them safe for golems, etc.
        B:CaptureNonItems=true

        # If true, conveyors will NEVER capture players regardless of other settings.
        B:NeverCapturePlayers=false

        # If true, conveyors will NEVER capture ThaumCraft golems regardless of other settings.
        B:NeverCaptureTCGolems=true
    }

    ChunkLoader {
        # If true, the Chunk Loader will use the activation energy config in this section. WARNING: this makes it much more expensive at lower values. (non-configurable is exponential)
        B:EnableConfigurableActivationEnergy=false

        # If true, the Chunk Loader will ignore forgeChunkLoading.cfg.
        B:IgnoreChunkLimit=false
        B:Recipe.Enabled=false

        # If true, the Chunk Loader will require that the player who placed it be online to function
        B:RequiresOwnerOnline=false
    }

    AutoSpawner {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=120

        # A list of entity IDs (e.g.: CaveSpider or VillagerGolem or Forestry.butterflyGE) to blacklist from the AutoSpawner. The Debugger item will display an entity's ID when used.
        S:Blacklist <
            VillagerGolem,
            EnderDragon,
            HardcoreEnderExpansion.Dragon,
            WitherBoss,
            GalacticraftCore.EvolvedSkeletonBoss,
            GalacticraftMars.CreeperBoss,
            BiomesOPlenty.Phantom,
            BiomesOPlenty.Pixie,
            witchery.demon,
            witchery.hornedHuntsman,
            witchery.ent,
            witchery.babayaga,
            witchery.covenwitch,
            witchery.nightmare,
            witchery.spectre,
            witchery.poltergeist,
            witchery.banshee,
            witchery.spirit,
            witchery.death,
            witchery.lordoftorment,
            witchery.imp,
            witchery.goblinmog,
            witchery.goblingulg,
            witchery.lilith,
            witchery.wingedmonkey,
            Botania.botania:doppleganger,
            BuildCraft|Robotics.bcRobot,
            Forestry.butterflyGE,
            Thaumcraft.Pech,
            Thaumcraft.TaintacleGiant,
            Thaumcraft.CultistLeader,
            Thaumcraft.EldritchGuardian,
            Thaumcraft.EldritchWarden,
            Thaumcraft.Golem
            TwilightForest.Twilight Lich,
            TwilightForest.Tower Boss,
            arsmagica2.BossWaterGuardian,
            arsmagica2.BossEnderGuardian,
            arsmagica2.BossLightningGuardian,
            arsmagica2.BossLifeGuardian,
            arsmagica2.BossFireGuardian,
            arsmagica2.BossAirGuardian,
            arsmagica2.BossWinterGuardian,
            arsmagica2.BossEarthGuardian,
            arsmagica2.BossArcaneGuardian,
            arsmagica2.BossNatureGuardian,
            AWWayofTime.FallenAngel,
            GrimoireOfGaia.Creeper Girl,
            GrimoireOfGaia.Trader,
            GrimoireOfGaia.Slime Girl,
            GrimoireOfGaia.Ender Girl,
            GrimoireOfGaia.Holstaurus,
            Mekanism.Robit,
            Mekanism.Balloon,
            OpenBlocks.Luggage,
            OpenBlocks.MiniMe,
            OpenComputers.Drone,
            Thaumcraft.TravelingTrunk,
            Thaumcraft.EldritchGuardian,
            Thaumcraft.EldritchWarden,
            Thaumcraft.CultistKnight,
            Thaumcraft.CultistCleric,
            magianaturalis.evilTrunk,
            wizardry.Skeleton Minion,
            wizardry.Spark Bomb,
            wizardry.Spirit Wolf,
            wizardry.Ice Shard,
            wizardry.Blaze Minion,
            wizardry.Ice Wraith,
            wizardry.Lightning Wraith,
            wizardry.Black Hole,
            wizardry.Shield,
            wizardry.Meteor,
            wizardry.Blizzard,
            wizardry.Wizard,
            wizardry.Bubble,
            wizardry.Tornado,
            wizardry.Lightning Hammer,
            wizardry.Firebomb,
            wizardry.Force Orb,
            wizardry.Arrow Rain,
            wizardry.Spark,
            wizardry.Shadow Wraith,
            wizardry.Darkness Orb,
            wizardry.Spider Minion,
            wizardry.Healing Aura,
            wizardry.Fire Sigil,
            wizardry.Frost Sigil,
            wizardry.Lightning Sigil,
            wizardry.Lightning Arrow,
            wizardry.Firebolt,
            wizardry.Poison Bomb,
            wizardry.Ice Charge,
            wizardry.Force Arrow,
            wizardry.Dart,
            wizardry.Magic Slime,
            wizardry.Forcefield,
            wizardry.Ring of Fire,
            wizardry.Lightning Disc,
            wizardry.Thunderbolt,
            wizardry.Ice Giant,
            wizardry.Spirit Horse,
            wizardry.Phoenix,
            wizardry.Silverfish Minion,
            wizardry.Decay,
            wizardry.Storm Elemental,
            wizardry.Earthquake,
            wizardry.Falling Grass,
            wizardry.Ice Lance,
            wizardry.Hailstorm,
            wizardry.Smoke Bomb,
            wizardry.Evil Wizard,
            wizardry.Decoy
         >
        B:Recipe.Enabled=true

        Cost {
            # The multiplier for work required to generate a mob in exact mode.
            I:Exact=5

            # The multiplier for work required to generate a mob in standard (non-exact) mode.
            I:Standard=1

            ##########################################################################################################
            # Custom
            #--------------------------------------------------------------------------------------------------------#
            # Custom base XP costs for entities. format: I:<entityid> = #. e.g.:
            # I:VillagerGolem = 25
            # I:Slime = 50
            ##########################################################################################################

            Custom {
            }

        }

    }

    Harvester {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=24
        B:Recipe.Enabled=false

        # If true, the harvester will skip scanning some bocks when filled with sludge
        B:SkipWork=false
    }

    LaserDrill {
        B:Recipe.Enabled=true

        # The work required by the drill to generate a single ore.
        I:Work=300
    }

    Unifier {
        # A list of ore dictionary entrys to disable unifying for. By default, MFR will not attempt to unify anything with more than one oredict name.
        S:Blacklist <
            dyeBlue
            dyeWhite
            dyeBrown
            dyeBlack
            listAllwater
            listAllmilk
         >
        B:Recipe.Enabled=true
    }

    Breeder {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=64
        B:Recipe.Enabled=true

        # If the number of entities in the breeder's target area exceeds this value, the breeder will cease operating. This is provided to control server lag.
        I:ShutdownThreshold=45
    }

    Fertilizer {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=96

        # If true, the fertilizer will use bonemeal as well as MFR fertilizer. Provided for those who want a less work-intensive farm.
        B:EnableBonemeal=false
        B:Recipe.Enabled=true
    }

    AutoDisenchanter {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=32

        # If true, the disenchanter will use essence to disenchant items. Provided for those who want a more work-intensive enchanting system.
        B:EnableEssence=false
        B:Recipe.Enabled=false
    }

    SteamBoiler {
        # If true, the steam boiler will explode if it's hot and dry when you try to pump water into it.
        B:Explodes=false
        B:Recipe.Enabled=false
    }

    Fisher {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=2
        B:Recipe.Enabled=true

        # If true, the fisher will require a fishing rod to function.
        B:RequiresFishingRod=false
    }

    AutoBrewer {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=4
        B:Recipe.Enabled=true

        # The amount of water used by the Auto-Brewer to fill a bottle with water
        I:WaterPerBottle=250
    }

    Planter {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=16
        B:Recipe.Enabled=false
    }

    Rancher {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=32
        B:Recipe.Enabled=true
    }

    Vet {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=32
        B:Recipe.Enabled=true
    }

    ItemCollector {
        B:Recipe.Enabled=true
    }

    BlockBreaker {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=96
        B:Recipe.Enabled=false
    }

    WeatherCollector {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=5
        B:Recipe.Enabled=true
    }

    SludgeBoiler {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=3
        B:Recipe.Enabled=true
    }

    Sewer {
        B:Recipe.Enabled=true
    }

    Composter {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=4
        B:Recipe.Enabled=true
    }

    Grinder {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=320
        B:Recipe.Enabled=true
    }

    AutoEnchanter {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=16
        B:Recipe.Enabled=true
    }

    Chronotyper {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=128
        B:Recipe.Enabled=true
    }

    Ejector {
        B:Recipe.Enabled=true
    }

    ItemRouter {
        B:Recipe.Enabled=true
    }

    LiquidRouter {
        B:Recipe.Enabled=true
    }

    DeepStorageUnit {
        B:Recipe.Enabled=true
    }

    LiquiCrafter {
        B:Recipe.Enabled=true
    }

    LavaFabricator {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=85
        B:Recipe.Enabled=false
    }

    AutoJukebox {
        B:Recipe.Enabled=true
    }

    BioReactor {
        B:Recipe.Enabled=false
    }

    BioFuelGenerator {
        # The amount of energy generated by this machine in one tick, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=16
        B:Recipe.Enabled=false
    }

    Slaughterhouse {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=100
        B:Recipe.Enabled=true
    }

    MeatPacker {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=2
        B:Recipe.Enabled=true
    }

    EnchantmentRouter {
        B:Recipe.Enabled=true
    }

    LaserDrillPrecharger {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=500
        B:Recipe.Enabled=true
    }

    AutoAnvil {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=16
        B:Recipe.Enabled=true
    }

    BlockSmasher {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=1
        B:Recipe.Enabled=true
    }

    RedNote {
        B:Recipe.Enabled=true
    }

    FruitPicker {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=32
        B:Recipe.Enabled=false
    }

    BlockPlacer {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=1
        B:Recipe.Enabled=true
    }

    MobCounter {
        B:Recipe.Enabled=true
    }

    SteamTurbine {
        # The amount of energy generated by this machine in one tick, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=16
        B:Recipe.Enabled=false
    }

    Fountain {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=8
        B:Recipe.Enabled=true
    }

    MobRouter {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=256
        B:Recipe.Enabled=true
    }

}


RecipeSets {
    # If true, MFR will register its EnderIO-based recipes.
    B:EnderIO=false

    # If true, MFR will register its Thermal Expansion-based recipes.
    B:ThermalExpansion=true

    # If true, MFR will register its standard (vanilla-item-only) recipes.
    B:Vanilla=false
}


general {
    # If true, MFR will attempt to automatically detect harvestable blocks and register them.
    B:Harvestables.Automatic=false

    # Set to false to disable various sounds and particle effects, such as when a block is harvested.
    B:PlaySounds=true

    # A list of entity IDs (e.g.: CaveSpider or VillagerGolem or Forestry.butterflyGE) to blacklist from being captured by the SafariNet. The Debugger item will display an entity's ID when used.
    S:SafariNetBlacklist <
     >

    # If true, when you have no empty slots in your inventory, you will continue filling buckets from tanks and drop them on the ground.
    B:Tanks.FillWithoutEmptySlots=true

    SearchDistance {
        # When searching for parts of a fruit tree, how far out to the sides (radius) to search
        I:FruitTree.MaxHoriztonal=5

        # When searching for parts of a fruit tree, how far up to search
        I:FruitTree.MaxVertical=20

        # When searching for players or dropoff locations, how far out to the sides (radius) to search
        I:PassengerRail.MaxHorizontal=3

        # When searching for players or dropoff locations, how far up to search
        I:PassengerRail.MaxVertical=2

        # How far upward to search for members of "stacking" blocks, like cactus and sugarcane
        I:StackingBlock.MaxVertical=5

        # When searching for parts of a tree, how far out to the sides (radius) to search
        I:Tree.MaxHorizontal=512

        # When searching for parts of a tree, how far up to search
        I:Tree.MaxVertical=256
    }

    RedNet {
        # If true, placed rednet cable will default to cable-only connections.
        B:CableOnly=true

        # A list of block IDs to prevent RedNet cables from connecting to. (e.g., minecraft:torch)
        S:ConnectionBlackList <
            IC2:*
            ic2:*
         >

        # If true, RedNet cables will dump a massive amount of data to the log file. You should probably only use this if PC tells you to.
        B:Debug=false
    }

    WorldGen {
        # A list of dimension IDs to disable MFR worldgen in.
        I:Dimension.Blacklist <
            -37
         >

        ##########################################################################################################
        # RetroGen
        #--------------------------------------------------------------------------------------------------------#
        # Enable or disable specific retrogen items.
        # Only has an effect if retroactive geneneration is enabled in CoFHCore.
        ##########################################################################################################

        RetroGen {
            B:RubberTrees=false
            B:SewageLakes=false
            B:SludgeLakes=false
        }

        RubberTrees {
            # A list of biomes to disallow rubber trees to spawn in. Overrides any other biomes added.
            S:Biome.Blacklist <
             >

            # A list of biomes to allow rubber trees to spawn in. Does nothing if rubber tree worldgen is disabled.
            S:Biome.Whitelist <
                Jungle
                Jungle M
                JungleHills
                JungleEdge
                JungleEdge M
                Rainforest
                Tropical Rainforest
                Tropics
             >

            # Whether or not to generate MFR rubber trees during map generation
            B:Enable=true

            # If true, enable adding Enchanted Sacred Rubber Saplings to stronghold library loot.
            B:SacredRubberSapling=false
        }

        Lakes {
            # Whether or not to generate MFR lakes during map generation. By default, MFR will not attempt lake worldgen in dimensions where the player cannot respawn.
            B:Enable=false

            Sludge {
                # A list of biomes to allow/disallow Sludge lakes to spawn in. Does nothing if lake worldgen is disabled.
                S:BiomeList <
                 >

                # If false, the biome list is a blacklist. If true, the biome list is a whitelist.
                B:BiomeList.Mode=false

                # Higher numbers make sludge lakes rarer. A value of one will be approximately one per chunk. 0 will disable.
                I:Rarity=32
            }

            Sewage {
                # A list of biomes to allow/disallow Sewage lakes to spawn in. Does nothing if lake worldgen is disabled.
                S:BiomeList <
                 >

                # If false, the biome list is a blacklist. If true, the biome list is a whitelist.
                B:BiomeList.Mode=false

                # Higher numbers make Sewage lakes rarer. A value of one will be approximately one per chunk. 0 will disable.
                I:Rarity=32
            }

        }

    }

}


item {
    # If true, Plastic Armor will stack to 4
    B:ArmorStacks=false

    # If true, biofuel will explode when in the nether.
    B:Biofuel.Exploding=true

    # The rate at which fish are dropped from the fishing rod. The drop rate is 1 / this number. Must be greater than 0.
    I:FishDropRate=5

    # If true, only pink slimes larger than tiny will drop pink slimeballs. Provided for those who want a more work-intensive laser drill. (slimes can only be made larger through the slime embiggening syringe)
    B:LargeSlimeDrop=false

    # If true, Empty Syringes will be able to contain liquids and inject players.
    B:LiquidSyringes=true

    # If true, meat will be worth steak saturation instead of cookie saturation.
    B:Meat.IncreasedSaturation=false

    # If true, SPAMRs will explode when they run out of fuel.
    B:SPAMR.Exploding=true

    VanillaOverride {
        # If true, replaces the vanilla milk bucket so milk can be placed in the world.
        B:MilkBucket=true
    }

    Recipe {
        # If true, the ChunkLoader can be built out of cheaper materials. Does nothing if the recipe is disabled.
        B:CheaperChunkLoader=false

        # If true, the DSU can be built out of chests instead of ender pearls. Does nothing if the recipe is disabled.
        B:CheaperDSU=false

        # If true, upgrades will require the previous level upgrade and a diamond. NOTE: this option requires all upgrades have recipes
        B:ExpensiveRangeUpgrades=false

        # If true, the reusable safarinet will require a portaspawner to craft. The portaspawner must be enabled for the safarinet to be craftable.
        B:ExpensiveSafariNet=false

        # If true, the golden jailer safarinet will be craftable. It causes released mobs to always render their nametag, like a player would.
        B:GoldenJailerSafariNet=true

        # If true, the Guns will be craftable.
        B:Guns=true

        # If true, mossy cobble can be crafted.
        B:MossyCobble=true

        # If true, the safarinet launcher will be craftable.
        B:NetLauncher=true

        # If true, the PortaSpawner will be craftable.
        B:PortaSpawner=true

        # DSU recipes will always craft one DSU. Does nothing for recipes that already only craft one DSU (cheap mode, etc).
        B:SingleDSU=true

        # If true, smooth double stone slabs can be craftable.
        B:SmoothSlab=true

        # If true, the Syringes will be craftable.
        B:Syringes=true
    }

}


